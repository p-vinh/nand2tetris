// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=A); // A instruction
    Not(in=A, out=M);               // M instruction

    And(a=M, b=instruction[5], out=ALUtoA); // Determines if instruction is A or M
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Aregin); // Stores value into A register

    // If A instruction or ALU output to A-register then Load A register
    Or(a=A, b=ALUtoA, out=loadA);
    ARegister(in=Aregin, load=loadA, out=Aout); // Get value from A register

    Mux16(a=Aout, b=inM, sel=instruction[12], out=AorM); // Determines if A or M depending on the instruction value
    
    // D register
    And(a=M, b=instruction[4], out=loadD); // Determines if D register should be loaded
    DRegister(in=ALUout, load=loadD, out=Dout); // Get value from D register

    // ALU calculations
    ALU(x=Dout, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);

    // Set the outputs
    Or16(a=false, b=Aout, out[0..14]=addressM); // Address to write
    Or16(a=false, b=ALUout, out=outM);

    And(a=M, b=instruction[3], out=writeM); // Determines if M should be written to

    // PC
    And(a=ZRout, b=instruction[1], out=jeq); // zero? Jump if zero
    And(a=NGout, b=instruction[2], out=jlt); // negative? Jump if negative
    Or(a=ZRout, b=NGout, out=ZNout); // Jump if zero or negative

    Not(in=ZNout, out=pos); // positive (if not zero or negative)
    And(a=pos, b=instruction[0], out=jgt); // Jump if true
    Or(a=jeq, b=jlt, out=jle); // Jump if less than or equal to
    Or(a=jle, b=jgt, out=jumpA); // Jump if less than or equal to or greater than
    
    And(a=M, b=jumpA, out=PCload); // load PC if M and jumpA are true
    Not(in=PCload, out=PCinc); // increment PC if PCload is false

    PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}